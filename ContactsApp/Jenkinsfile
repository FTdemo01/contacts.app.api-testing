pipeline {
    agent any
    
    stages {
        stage('Checkout') {
            steps {
                // Checkout the source code from your version control system
                script {
                    withCredentials([usernamePassword(credentialsId: 'Github_credentials', usernameVariable: 'poonam', passwordVariable: 'Admin@123')]) {
                        git credentialsId: 'Github_credentials', url: 'https://github.com/FTdemo01/contacts.app.api-testing.git', branch: 'main', username: env.USERNAME, password: env.PASSWORD
                    }
                }
            }
        }
        
        stage('Check .NET SDK') {
            steps {
                // Check .NET SDK version
                sh 'dotnet --version'
            }
        }
        
        stage('Debug') {
            steps {
                // Debugging step to print contents of the directory containing msbuild
                sh 'ls -l /mnt/d/Testing/contacts.app.api-testing/ContactsApp'
            }
        }
        
        stage('Build') {
            steps {
                // Build the .NET solution using MSBuild
                dir('CONTACTS.APP.API-TESTING') {
                    // Navigate to the directory containing the solution file
                    dir('ContactsApp') {
                        // Build the .NET solution using MSBuild with full path
                        sh '"/mnt/d/Testing/contacts.app.api-testing/ContactsApp/msbuild" ContactsApp.sln /p:Configuration=Release'
                    }
                }
            }
        }
    }
    
    post {
        success {
            // Actions to perform after successful pipeline execution
            echo 'Pipeline executed successfully!'
        }
        failure {
            // Actions to perform after failed pipeline execution
            echo 'Pipeline execution failed!'
        }
        always {
            // Actions to perform regardless of pipeline result
            // For example, cleanup steps
            cleanWs()
        }
    }
}